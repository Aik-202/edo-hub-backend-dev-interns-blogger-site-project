const path=require('path');
const dotenv=require('dotenv');
dotenv.config(path.join(__dirname,'.env'));
const bcrypt=require('bcrypt');
const nodemailer = require("nodemailer");
const {validationResult}=require('express-validator');
const {generateFromEmail}=require('unique-username-generator');
const { google } = require("googleapis");
const OAuth2 = google.auth.OAuth2;
const modelForRegistration=require(path.join(__dirname,'..','Model','userDetails.model.js'));
const saltRounds=10;
const filedot=modelForRegistration.register;




function RegisterRouterGetFunction(req,res){
  res.sendFile(path.join(__dirname,'..','Client','public','Register_page.html'));
}

async function RegisterRouterPostFunction (req,res){
  let userName;
try{
  const errorMessage=validationResult(req);

if(!errorMessage.isEmpty()){
  return res.status(400).json({
    error:errorMessage.array()[0].msg
  })
  
  }

const formDetails= req.body;
const findEmail=formDetails.email;
const emailAdd=formDetails.email;

filedot.find({emailAddress:emailAdd},(error,data)=>{
    if(error){
        console.log(error)
    }
    else{
    if(data.length==0){
        bcrypt.hash(formDetails.user_password,saltRounds,function(err,hash){
          userName=generateFromEmail(emailAdd,4);
            const newUserInfo=new filedot({
                fullName:formDetails.name,
                emailAddress:formDetails.email,
                userPassword:hash,
                autoGeneratedUserName:userName
            })
            newUserInfo.save().then(()=>{
              req.session.Login=true;
              req.session.userIdentification=userName;
              console.log(`true:${req.session.Login}`)
              // req.session.userIdentification=user;
              res.redirect('/Userdashboard');
            });
            })
            
            
    }
    else{
        
               res.json({
                error:'user already exist'
               })   
                    }
}
})

  
}
catch(error){
  console.log(error)
}
}


    

    module.exports={
        RegisterRouterGetFunction,
        RegisterRouterPostFunction,
    }
