const path=require('path');
const dotenv=require('dotenv');
dotenv.config(path.join(__dirname,'.env'));
const bcrypt=require('bcrypt');
const nodemailer = require("nodemailer");
const {validationResult}=require('express-validator');
const {generateFromEmail}=require('unique-username-generator');
const { google } = require("googleapis");
const OAuth2 = google.auth.OAuth2;
const modelForRegistration=require(path.join('..','Model','userDetails.model.js'));
const saltRounds=10;
const filedot=modelForRegistration.register;




function RegisterRouterGetFunction(req,res){
  res.sendFile(path.join(__dirname,'..','Client','public','Register_page.html'));
}

async function RegisterRouterPostFunction (req,res){
  let userName;
try{
  const errorMessage=validationResult(req);

if(!errorMessage.isEmpty()){
  return res.status(400).json({
    error:errorMessage.array()[0].msg
  })
  
  }

const formDetails= req.body;
const findEmail=formDetails.email;
const emailAdd=formDetails.email;

filedot.find({emailAddress:emailAdd},(error,data)=>{
    if(error){
        console.log(error)
    }
    else{
    if(data.length==0){
        bcrypt.hash(formDetails.user_password,saltRounds,function(err,hash){
          userName=generateFromEmail(emailAdd,4);
            const newUserInfo=new filedot({
                fullName:formDetails.name,
                emailAddress:formDetails.email,
                userPassword:hash,
                autoGeneratedUserName:userName
            })
            newUserInfo.save();
            })
            // const createTransporter = async () => {
            //     const oauth2Client = new OAuth2(
            //       process.env.CLIENT_ID,
            //       process.env.CLIENT_SECRET,
            //       "https://developers.google.com/oauthplayground"
            //     );
              
            //     oauth2Client.setCredentials({
            //       refresh_token: process.env.REFRESH
            //     });
              
            //     const accessToken = await new Promise((resolve, reject) => {
            //       oauth2Client.getAccessToken((err, token) => {
            //         if (err) {
            //           reject("Failed to create access token :(");
            //         }
            //         resolve(token);
            //       });
            //     });
              
            //     const transporter = nodemailer.createTransport({
            //       service: "gmail",
            //       auth: {
            //         type: "OAuth2",
            //         user: process.env.USER_EMAIL,
            //         accessToken,
            //         clientId: process.env.CLIENT_ID,
            //         clientSecret: process.env.CLIENT_SECRET,
            //         refreshToken: process.env.REFRESH
            //       }
            //     });
              
            //     return transporter;
            //   };
              
            //   const sendEmail = async (emailOptions) => {
            //     let emailTransporter = await createTransporter();
            //     await emailTransporter.sendMail(emailOptions);
            //   };
              
            //   sendEmail({
            //     subject: "Test",
            //     text: "HI, CHI-CHI,HOW ARE YOU?!",
            //     to: formDetails.email,
            //     from: process.env.USER_EMAIL
            //   });
            res.render('User_dashboard',{userName:req.session.userIdentification});
    }
    else{
        
               res.json({
                error:'user already exist'
               })   
                    }
}
})

  
}
catch(error){
  console.log(error)
}
}


    

    module.exports={
        RegisterRouterGetFunction,
        RegisterRouterPostFunction,
    }
