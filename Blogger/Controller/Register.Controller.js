require('dotenv').config();

const path=require('path');

const nodemailer=require('nodemailer');

const {google}=require('googleapis')

const {generateFromEmail}=require('unique-username-generator');

const bcrypt=require('bcrypt');

const {validationResult}=require('express-validator');

const {User}=require(path.join(__dirname,'..','Model','user.model'));

async function getRegistrationForm(req,res){
    res.locals.registrationInfo='';
    res.render('Register_page');
}

const oAuth2Client=new google.auth.OAuth2(process.env.CLIENT_ID,process.env.CLIENT_SECRET,'https://developers.google.com/oauthplayground');

oAuth2Client.setCredentials({refresh_token:process.env.REFRESH_TOKEN})

async function sendEmail(created){
    try{
        const accessToken=await oAuth2Client.getAccessToken();
        const transport=nodemailer.createTransport({
            service:'gmail',
            auth:{
                type:'OAuth2',
                user:process.env.USER_EMAIL,
                accessToken:accessToken,
                clientId:process.env.CLIENT_ID,
                clientSecret:process.env.CLIENT_SECRET,
                refreshToken:process.env.REFRESH_TOKEN
               

            }
        })

        const date=created.createdAt.toDateString();
    
        const mailOptions={
            from:`BLOGGER<${process.env.USER_EMAIL}>`,
            to:created.emailAddress,
            subject:'Your Account was created successfully',
            html:`TIME:${date}<br> Thanks for registering to the blogger social network.<br> this is your autogenerated username:${created.username}`,
        }
        transport.sendMail(mailOptions)
        


    }catch(error){
res.status(400)
.json({
    success:false,
    error:[
        {
            value:error.value,
            error:error.name,
            message:error.message
        }
    ],
    message:"An error occurred while processing your request",
    data:{}
})
}

}


async function createAnAccount(req,res){
 const errors=validationResult(req);
 if(errors.isEmpty()){
    const {name,email,user_password}=req.body;
    User.findOne({emailAddress:email}, async function(issue,found){
        if(issue){
            res.status(500).json({
                success:false,
                error:[],
                message:"An error occurred while processing your data, please try again",
                data:{}
            })
        }else if(found){
            res.locals.registrationInfo="A user with this email already exists";
            res.render('Register_page');

        }else if(!found){
           if(email!=process.env.ADMIN){
            const admin=false;
           await  createUser(user_password,admin,name,email,req);
         
          return res.redirect('/userdashboard');

           }else{
            const admin=true;
           await  createUser(user_password,admin,name,email,req)
        
          return res.redirect('/admindashboard');
       

           }
    
        }
    })

 }else{
    res.status(422).json({
        success:false,
        error:errors.array(),
        message:"Invalid input",
        data:{}
    })
 }

}

async function createUser(user_password,admin,name,email,req){
    const hash=await bcrypt.hash(user_password,10);
           const Generateusername = generateFromEmail(
            email,
            4
          );
          const created= await User.create({
                fullName:name,
                emailAddress:email,
                password:hash,
                username:Generateusername,
                Admin:admin
            });
            const today=new Date();
            sendEmail(created);
            User.updateOne({_id:created._id},{$set:{'loggedIn.isLoggedIn':true,'loggedIn.date':today,'loggedOut.isLoggedOut':false,'loggedOut.date':''}})
         .then(()=>{
            req.session.userId=created._id;
            req.session.user_name=created.username
         })

}

module.exports={
    getRegistrationForm,
    createAnAccount
}