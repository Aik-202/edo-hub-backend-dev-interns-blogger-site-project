const path=require('path');
const multer=require('multer');

const {register}=require(path.join(__dirname,'..','Model','userDetails.model.js'));

const {profile}=require(path.join(__dirname,'..','Model','profile.model.js'));

const {storage,cloudinary}=require(path.join(__dirname,'..','Cloudinary','cloudinary.config.js'));
const upload=multer({storage:storage});

// const schema=new mongoose.Schema({
//   url:String,
//   fileName:String,
//   fullName:String,
//   about:String
// })

async function uploadProfileDetails(req,res){
 try{
  if(req.file){
  const newFile=req.file.path.replace('upload','upload/g_face');
  req.file.path=newFile;

  register.findOne({autoGeneratedUserName:req.session.userIdentification},function(error,result){
  profile.findOne({userId:result._id},function(err,outcome){
if(err){

}
else{
  if(outcome){
    if(req.file){
      if(outcome.path){
       async function cloud (){
        try{
          cloudinary.uploader.destroy(outcome.filename)
        }catch(deleteFromCloudError){
              console.log(`deleteFromCloudError${deleteFromCloudError}`)  
        }
       }
       async function update(){
        try{
          await cloud()
        if(req.body){
          profile.updateOne({userId:result._id},{$set:req.file}).then(()=>{
            profile.updateOne({userId:result._id},{$set:req.body})  
    
            res.json({
              imageUpdate:req.file,
              dataUpdate:req.body
            })
        })
        }
        else if(!req.body){
          profile.updateOne({userId:result._id},{$set:req.file})
        }
        }catch(updateAfterCloudError){
          console.log(`updateAfterCloudError${updateAfterCloudError}`)
        }
      

       }
       update();
      }
      else{
        if(req.body){
          profile.updateOne({userId:result._id},{$set:req.file}).then(()=>{
            profile.updateOne({userId:result._id},{$set:req.body})
            res.json({
              imageUpdate:req.file,
              dataUpdate:req.body
            })
        
        })

        }
        else{
          profile.updateOne({userId:result._id},{$set:req.body})
            res.json({
              imageUpdate:req.file,
              dataUpdate:req.body
            })
        }
      }
    }
  }
  else if(!outcome){
    const newProfile=new profile({
      path:req.file.path,
      filename:req.file.filename,
      fullName:result.fullName,
      about:req.body.about,
      userId:result._id
  })
    newProfile.save();
    res.json({
      imageUpdate:req.file,
      dataUpdate:req.body
    })

  }
}
  })
})
 

  
  }
  else if(!req.file){
    if(req.body){
      profile.updateOne({userId:result._id},{$set:req.body})
      res.json({
        imageUpdate:req.file,
        dataUpdate:req.body
      })
    }
   else if(!req.body){
    res.json({
      imageUpdate:req.file,
      dataUpdate:req.body
    })
   }


}


 }catch(err){

 }
  

}

module.exports={
    uploadProfileDetails
}